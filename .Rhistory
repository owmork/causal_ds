)
ggdag_status(rdd, text = T, use_labels = "label") +
theme_dag_cds() +
guides(color = "none") +
geom_dag_text(color = "white") +
geom_dag_edges(edge_color = "white")
ggdag(rdd, text = T, use_labels = "label") +
theme_dag_cds() +
guides(color = "none") +
geom_dag_text(color = "white") +
geom_dag_edges(edge_color = "white")
ggdag_status(rdd, text = T, use_labels = "name") +
theme_dag_cds() +
guides(color = "none") +
geom_dag_text(color = "white") +
geom_dag_edges(edge_color = "white")
rdd <- dagify(
Y ~ D,
Y ~ U,
D ~ X,
exposure = "D",
outcome = "Y",
latent = "U",
coords = list(x = c(Y = 1, D = 0, X = 0, U = 1),
y = c(Y = 0, D = 0, X = 1, U = 1)),
labels = list(X = "FEFE", Y = "FEFE", U = "FEFE", D = "FEFE")
)
ggdag_status(rdd, text = T, use_labels = "name") +
theme_dag_cds() +
guides(color = "none") +
geom_dag_text(color = "white") +
geom_dag_edges(edge_color = "white")
ggdag_status(rdd, text = T, use_labels = "label") +
theme_dag_cds() +
guides(color = "none") +
geom_dag_text(color = "white") +
geom_dag_edges(edge_color = "white")
rdd <- dagify(
Y ~ D,
Y ~ U,
D ~ X,
exposure = "D",
outcome = "Y",
latent = "U",
coords = list(x = c(Y = 1, D = 0, X = 0, U = 1),
y = c(Y = 0, D = 0, X = 1, U = 1)),
labels = list(X = "FEFfE", Y = "FEaFE", U = "FEwFE", D = "FEFEa")
)
ggdag_status(rdd, text = T, use_labels = "label") +
theme_dag_cds() +
guides(color = "none") +
geom_dag_text(color = "white") +
geom_dag_edges(edge_color = "white")
rdd <- dagify(
Y ~ D,
Y ~ U,
D ~ X,
exposure = "D",
outcome = "Y",
latent = "U",
coords = list(x = c(Y = 1, D = 0, X = 0, U = 1),
y = c(Y = 0, D = 0, X = 1, U = 1)),
labels = list(X = "", Y = "FEaFE", U = "FEwFE", D = "FEFEa")
)
ggdag_status(rdd, text = T, use_labels = "label") +
theme_dag_cds() +
guides(color = "none") +
geom_dag_text(color = "white") +
geom_dag_edges(edge_color = "white")
rdd <- dagify(
Y ~ D,
Y ~ U,
D ~ X,
exposure = "D",
outcome = "Y",
latent = "U",
coords = list(x = c(Y = 1, D = 0, X = 0, U = 1),
y = c(Y = 0, D = 0, X = 1, U = 1)),
labels = list(X = "X -> c_0", Y = "", U = "", D = "")
)
ggdag_status(rdd, text = T, use_labels = "label") +
theme_dag_cds() +
guides(color = "none") +
geom_dag_text(color = "white") +
geom_dag_edges(edge_color = "white")
expression(X)
expression("X")
rdd <- dagify(
Y ~ D,
Y ~ U,
D ~ X,
exposure = "D",
outcome = "Y",
latent = "U",
coords = list(x = c(Y = 1, D = 0, X = 0, U = 1),
y = c(Y = 0, D = 0, X = 1, U = 1)),
labels = list(X = expression(X -> c_0), Y = "", U = "", D = "")
)
ggdag_status(rdd, text = T, use_labels = "label") +
theme_dag_cds() +
guides(color = "none") +
geom_dag_text(color = "white") +
geom_dag_edges(edge_color = "white")
install.packages("latexx2epx")
install.packages("latex2exp")
latex2exp::TeX("c_0")
rdd <- dagify(
Y ~ D,
Y ~ U,
D ~ X,
exposure = "D",
outcome = "Y",
latent = "U",
coords = list(x = c(Y = 1, D = 0, X = 0, U = 1),
y = c(Y = 0, D = 0, X = 1, U = 1)),
labels = list(X = latex2exp::TeX("c_0"), Y = "", U = "", D = "")
)
ggdag_status(rdd, text = T, use_labels = "label") +
theme_dag_cds() +
guides(color = "none") +
geom_dag_text(color = "white") +
geom_dag_edges(edge_color = "white")
latex2exp::TeX(r'c_0')
rdd <- dagify(
Y ~ D,
Y ~ U,
D ~ X,
exposure = "D",
outcome = "Y",
latent = "U",
coords = list(x = c(Y = 1, D = 0, X = 0, U = 1),
y = c(Y = 0, D = 0, X = 1, U = 1)),
labels = list(X = latex2exp::TeX(r'(Using $\LaTeX$ for plotting in base graphics!)', bold=TRUE), Y = "", U = "", D = "")
)
ggdag_status(rdd, text = T, use_labels = "label") +
theme_dag_cds() +
guides(color = "none") +
geom_dag_text(color = "white") +
geom_dag_edges(edge_color = "white")
rdd <- dagify(
Y ~ D,
Y ~ U,
D ~ X,
exposure = "D",
outcome = "Y",
latent = "U",
coords = list(x = c(Y = 1, D = 0, X = 0, U = 1),
y = c(Y = 0, D = 0, X = 1, U = 1)),
labels = list(X = "X around c0", Y = "", U = "", D = "")
)
ggdag_status(rdd, text = T, use_labels = "label") +
theme_dag_cds() +
guides(color = "none") +
geom_dag_text(color = "white") +
geom_dag_edges(edge_color = "white")
rdd <- dagify(
Y ~ D,
Y ~ U,
D ~ X,
exposure = "D",
outcome = "Y",
latent = "U",
coords = list(x = c(Y = 1, D = 0, X = 0, U = 1),
y = c(Y = 0, D = 0, X = 1, U = 1)),
labels = list(X = "X close to c0", Y = "", U = "", D = "")
)
ggdag_status(rdd, text = T, use_labels = "label") +
theme_dag_cds() +
guides(color = "none") +
geom_dag_text(color = "white") +
geom_dag_edges(edge_color = "white")
ggdag_status(rdd, text = T, use_labels = "label") +
theme_dag_cds() +
guides(color = "none") +
geom_dag_text(color = "white") +
geom_dag_edges(edge_color = "white")
ggdag_status(rdd, text = T, use_labels = "label") +
theme_dag_cds() +
guides(color = "none") +
geom_dag_text(color = "white") +
geom_dag_edges(edge_color = "white")
# [2.2] Random assignment test ----
# identifying assumption: random assignment to either side of cut-off
# Manual plot
ggplot(df, aes(x = days_since_last, fill = coupon)) +
#geom_histogram(binwidth = .1, color = "white", boundary = c0)
geom_histogram(binwidth = .1, color = "white", boundary = c0, alpha = .6) +
geom_vline(xintercept = c0, color = ggthemr::swatch()[5], size = 2, linetype = "solid")
#| message: false
# Plot dependent variable vs running variable
dep_var <-
ggplot(df, aes(x = days_since_last, y = purchase_after, color = coupon)) +
geom_vline(xintercept = c0, color = ggthemr::swatch()[5]) +
geom_point(alpha = 0.1, size = 0.2) +
# add lines for the full range
geom_smooth(data = filter(df, days_since_last <= c0),
method = "lm", se = F, linewidth = 1, linetype = "dashed") +
geom_smooth(data = filter(df, days_since_last > c0),
method = "lm", se = F, linewidth = 1, linetype = "dashed") +
# add lines for specified bandwidth
geom_smooth(data = df_bw_below, method = "lm", se = F, linewidth = 2) +
geom_smooth(data = df_bw_below, method = "lm", color = "white",
se = F, linewidth = 3) +
geom_smooth(data = df_bw_above, method = "lm", se = F, linewidth = 2) +
scale_color_discrete(labels = c("No coupon", "Coupon")) +
xlab("Days since last purchase") +
ylab("Purchase after coupon assignment") +
theme(legend.title = element_blank())
knitr::opts_chunk$set(fig.width = 6, fig.asp = 0.618, fig.align = "center", fig.retina = 3, out.width = "75%")
set.seed(11)
options("digits" = 2, "width" = 150)
options(dplyr.summarise.inform = FALSE)
# custom ggplot theme
# colors from TUHH brand identitiy
tuhh_colors <- c("#D0D0CE", "#00C1D4", "#FF4F4F", "#5AFFC5",
"#FFDE36", "#143BFF", "#FF7E15", "#FFAEA2")
# initialise theme
cds_theme <- ggthemr::define_palette(
swatch = tuhh_colors,
gradient = c(lower = "#FFAEA2", upper = "#00C1D4"),
background = "#0F2231",
line = c("#FFFFFF", "#FFFFFF"),
text = c("#FFFFFF", "#FFFFFF"),
gridline = c(ggplot2::alpha("#D0D0CE", 0.2),
ggplot2::alpha("#D0D0CE", 0.4))
)
# set theme
ggthemr::ggthemr(cds_theme, type = "outer")
# source custom DAG theme
source("../../code/dag_theme.R")
#| message: false
#| echo: false
#| layout-nrow: 1
# Load packages
library(tidyverse)
library(ggdag)
library(dagitty)
# Initial situation
initial <- dagify(
Y ~ D,
Y ~ X,
Y ~ U,
D ~ X,
X ~ U,
exposure = "D",
outcome = "Y",
latent = "U",
coords = list(x = c(Y = 1, D = 0, X = 0, U = 1),
y = c(Y = 0, D = 0, X = 1, U = 1))
)
ggdag_status(initial, text = T) +
theme_dag_cds() +
guides(color = "none") +
geom_dag_text(color = "white") +
geom_dag_edges(edge_color = "white")
# RDD
rdd <- dagify(
Y ~ D,
Y ~ U,
D ~ X,
exposure = "D",
outcome = "Y",
latent = "U",
coords = list(x = c(Y = 1, D = 0, X = 0, U = 1),
y = c(Y = 0, D = 0, X = 1, U = 1)),
labels = list(X = "X close to c0", Y = "", U = "", D = "")
)
ggdag_status(rdd, text = T, use_labels = "label") +
theme_dag_cds() +
guides(color = "none") +
geom_dag_text(color = "white") +
geom_dag_edges(edge_color = "white")
View(dag_1)
#| echo: false
#| message: false
#| warning: false
#| layout-nrow: 1
#| fig-cap:
#|   - "Omitted variable bias"
#|   - "Instrumental variable estimation"
library(tidyverse)
library(ggdag)
library(dagitty)
# Omitted variable bias
ovb <- dagify(
Y ~ D,
Y ~ U,
D ~ U,
exposure = "D",
latent = "U",
outcome = "Y",
coords = list(x = c(U = 1, D = 0, Y = 2),
y = c(U = 1, D = 0, Y = 0))#,
# labels = c("D" = "Treatment",
#            "Y" = "Outcome",
#            "U" = "Unobserved Variable")
)
ovb_dag <- ggdag_status(ovb, text = T) +
guides(color = "none") +
theme_dag_cds() +
geom_dag_point(color = ggthemr::swatch()[2]) +
geom_dag_text(color = "white") +
geom_dag_edges(edge_color = "white")
# Instrumental Variable Estimation - Application
iv_expl <- dagify(
Y ~ D,
Y ~ U,
D ~ U,
D ~ Z,
exposure = "D",
latent = "U",
outcome = "Y",
coords = list(x = c(U = 1, D = 0, Y = 2, Z = -1),
y = c(U = 1, D = 0, Y = 0, Z = 0)),
labels = c("D" = "Participation in training",
"Y" = "KPI/Efficiency",
"U" = "Motivation",
"Z" = "Distance to training location")
)
ggdag(iv_expl, text = T) +
guides(color = "none") +
theme_dag_cds() +
geom_dag_point(color = ggthemr::swatch()[2]) +
geom_dag_text(color = "white") +
geom_dag_edges(edge_color = "white")
# Instrumental Variable Estimation - Application
iv_expl <- dagify(
Y ~ D,
Y ~ U,
D ~ U,
D ~ Z,
exposure = "D",
latent = "U",
outcome = "Y",
coords = list(x = c(U = 1, D = 0, Y = 2, Z = -1),
y = c(U = 1, D = 0, Y = 0, Z = 0)),
labels = c("D" = "Participation in training",
"Y" = "KPI/Efficiency",
"U" = "Motivation",
"Z" = "Distance to training location")
)
ggdag(iv_expl, text = T)
.title-block {
knitr::opts_chunk$set(fig.width = 6, fig.asp = 0.618, fig.align = "center", fig.retina = 3, out.width = "75%")
set.seed(11)
options("digits" = 2, "width" = 150)
options(dplyr.summarise.inform = FALSE)
# custom ggplot theme
# colors from TUHH brand identitiy
tuhh_colors <- c("#D0D0CE", "#00C1D4", "#FF4F4F", "#5AFFC5",
"#FFDE36", "#143BFF", "#FF7E15", "#FFAEA2")
# initialise theme
cds_theme <- ggthemr::define_palette(
swatch = tuhh_colors,
gradient = c(lower = "#FFAEA2", upper = "#00C1D4"),
background = "#0F2231",
line = c("#FFFFFF", "#FFFFFF"),
text = c("#FFFFFF", "#FFFFFF"),
gridline = c(ggplot2::alpha("#D0D0CE", 0.2),
ggplot2::alpha("#D0D0CE", 0.4))
)
devtools::install_github('Mikata-Project/ggthemr')
install.packages("devtools")
devtools::install_github('Mikata-Project/ggthemr')
abtest_online <- readRDS("~/my_drive/TUHH/03_github/causal_ds/datasets/abtest_online.rds")
View(abtest_online)
library(swirl)
install_course("The R Programming Environment")
swirl()
swirl()
swirl()
swirl()
worldcup
wc_1 <- worldcup %>% select(Time, Passes, Tackles, Saves)
submit()
wc_2 <- worldcup %>%
select(Time, Passes, Tackles, Saves) %>%
summarise_all(mean)
worldcup %>%
select(Time, Passes, Tackles, Saves) %>%
summarise_all(mean)
submit()
install.packages("ggthemr")
devtools::install_github('Mikata-Project/ggthemr')
install.packages("devtools")
devtools::install_github('Mikata-Project/ggthemr')
?rep
rep(1/6, times = 6)
knitr::opts_chunk$set(fig.width = 6, fig.asp = 0.618, fig.align = "center", fig.retina = 3, out.width = "75%")
set.seed(11)
options("digits" = 2, "width" = 150)
options(dplyr.summarise.inform = FALSE)
# custom ggplot theme
# colors from TUHH brand identitiy
tuhh_colors <- c("#D0D0CE", "#00C1D4", "#FF4F4F", "#5AFFC5",
"#FFDE36", "#143BFF", "#FF7E15", "#FFAEA2")
# initialise theme
cds_theme <- ggthemr::define_palette(
swatch = tuhh_colors,
gradient = c(lower = "#FFAEA2", upper = "#00C1D4"),
background = "#0F2231",
line = c("#FFFFFF", "#FFFFFF"),
text = c("#FFFFFF", "#FFFFFF"),
gridline = c(ggplot2::alpha("#D0D0CE", 0.2),
ggplot2::alpha("#D0D0CE", 0.4))
)
# set theme
ggthemr::ggthemr(cds_theme, type = "outer")
# source custom DAG theme
source("../../code/dag_theme.R")
source("code/dag_theme.R")
#| code-fold: true
#| warning: false
#| layout-nrow: 1
# Load packages
library(tidyverse)
library(dagitty)
library(ggdag)
# without confounder
schooling_1 <- dagify(
salary ~ uni_degree,
coords = list(x = c(uni_degree = 1, salary = 3),
y = c(uni_degree = 1, salary = 1))
)
# Plot DAG
ggdag(schooling_1, use_labels = "name", text = F) +
theme_dag_cds() +
geom_dag_point(color = ggthemr::swatch()[2]) +
geom_dag_text(color = NA) +
geom_dag_edges(edge_color = "white")
# with confounder
schooling_2 <- dagify(
uni_degree ~ ability,
salary ~ ability,
salary ~ uni_degree,
coords = list(x = c(uni_degree = 1, salary = 3, ability = 2),
y = c(uni_degree = 1, salary = 1, ability = 2))
)
# Plot DAG
ggdag(schooling_2, use_labels = "name", text = F) +
theme_dag_cds() +
geom_dag_point(color = ggthemr::swatch()[2]) +
geom_dag_text(color = NA) +
geom_dag_edges(edge_color = "white")
#| code-fold: true
#| warning: false
#| layout-nrow: 1
# Load packages
library(tidyverse)
library(dagitty)
library(ggdag)
# without confounder
schooling_1 <- dagify(
salary ~ uni_degree,
coords = list(x = c(uni_degree = 1, salary = 3),
y = c(uni_degree = 1, salary = 1))
)
# Plot DAG
ggdag(schooling_1, use_labels = "name", text = F) +
theme_dag_cds() +
geom_dag_point(color = ggthemr::swatch()[2]) +
geom_dag_text(color = NA) +
geom_dag_edges(edge_color = "white")
# with confounder
schooling_2 <- dagify(
uni_degree ~ ability,
salary ~ ability,
salary ~ uni_degree,
coords = list(x = c(uni_degree = 1, salary = 3, ability = 2),
y = c(uni_degree = 1, salary = 1, ability = 2))
)
# Plot DAG
ggdag(schooling_2, use_labels = "name", text = F) +
theme_dag_cds() +
geom_dag_point(color = ggthemr::swatch()[2]) +
geom_dag_text(color = NA) +
geom_dag_edges(edge_color = "white")
#| code-fold: true
#| warning: false
#| layout-nrow: 1
# Load packages
library(tidyverse)
library(dagitty)
library(ggdag)
# without confounder
schooling_1 <- dagify(
salary ~ uni_degree,
coords = list(x = c(uni_degree = 1, salary = 3),
y = c(uni_degree = 1, salary = 1))
)
# Plot DAG
ggdag(schooling_1, use_labels = "name", text = F) +
theme_dag_cds() +
geom_dag_point(color = ggthemr::swatch()[2]) +
geom_dag_text(color = NA) +
geom_dag_edges(edge_color = "white")
# with confounder
schooling_2 <- dagify(
uni_degree ~ ability,
salary ~ ability,
salary ~ uni_degree,
coords = list(x = c(uni_degree = 1, salary = 3, ability = 2),
y = c(uni_degree = 1, salary = 1, ability = 2))
)
# Plot DAG
ggdag(schooling_2, use_labels = "name", text = F) +
theme_dag_cds() +
geom_dag_point(color = ggthemr::swatch()[2]) +
geom_dag_text(color = NA) +
geom_dag_edges(edge_color = "white") +
geom_dag_label_repel()
schooling_2
